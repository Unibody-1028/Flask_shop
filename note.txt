#检查virtualenv 是否正确安装
virtualenv --version

# 创建名为 shop_env 的虚拟环境（会在当前目录生成 shop_env 文件夹）
virtualenv shop_env

# 激活虚拟环境（macOS/Linux 系统）
source shop_env/bin/activate


# 查看端口占用 sudo lsof -i tcp:8088
# 终止进程 sudo kill -9 PID

pip freeze > requirements.txt




一、仓库初始化与克隆
命令	作用
git init	在当前目录初始化一个新的 Git 仓库
git clone <远程仓库地址>	克隆远程仓库到本地（如 git clone https://github.com/xxx/xxx.git）
二、分支操作
命令	作用
git branch	查看本地所有分支（当前分支前有 *）
git branch -r	查看远程所有分支
git branch -a	查看本地 + 远程所有分支
git branch <分支名>	创建新分支（如 git branch dev1）
git checkout <分支名>	切换到指定分支（如 git checkout dev1）
git checkout -b <分支名>	创建并立即切换到新分支（如 git checkout -b dev1）
git branch -d <分支名>	删除本地分支（如 git branch -d dev1，需先切换到其他分支）
git push origin --delete <分支名>	删除远程分支（如 git push origin --delete dev1）
三、代码暂存与提交
命令	作用
git status	查看工作区文件状态（哪些文件被修改 / 新增 / 删除）
git add <文件名>	将指定文件添加到暂存区（如 git add index.js）
git add .	将所有修改的文件添加到暂存区（不包括被忽略的文件）
git add -A	将所有修改（包括删除的文件）添加到暂存区
git commit -m "提交说明"	将暂存区的文件提交到本地仓库（提交说明需清晰描述修改内容）
git commit --amend	修改最近一次的提交信息（未推送到远程时使用）
git reset HEAD <文件名>	将暂存区的文件撤回（回到工作区，如 git reset HEAD index.js）
git checkout -- <文件名>	丢弃工作区的修改（恢复到最近一次提交的状态，谨慎使用！）
四、远程仓库交互
命令	作用
git remote	查看远程仓库名称（默认通常是 origin）
git remote -v	查看远程仓库的详细地址（fetch 拉取地址、push 推送地址）
git remote add <远程名> <地址>	添加远程仓库（如 git remote add origin https://xxx.git）
git fetch <远程名>	拉取远程仓库的最新代码（不合并到本地分支，如 git fetch origin）
git pull <远程名> <分支名>	拉取远程分支并合并到当前本地分支（如 git pull origin main）
git push <远程名> <本地分支名>	将本地分支推送到远程（如 git push origin dev1）
git push -u <远程名> <本地分支名>	推送并关联远程分支（首次推送新分支时使用，后续可直接 git push）
五、分支合并与冲突解决
命令	作用
git merge <分支名>	将指定分支合并到当前分支（如在 main 分支执行 git merge dev1，合并 dev1 到 main）
git merge --abort	合并冲突时，放弃合并，回到合并前的状态
git rebase <目标分支>	以目标分支为基准，重新排列当前分支的提交（更整洁的提交历史，如 git rebase main）
git rebase --abort	取消 rebase 操作
六、版本回退
命令	作用
git log	查看提交历史（按时间倒序，q 退出查看）
git log --oneline	简洁显示提交历史（一行一个提交）
git reset --hard <提交ID>	回退到指定版本（提交 ID 可通过 git log 获取，谨慎使用！会丢弃后续提交）
git revert <提交ID>	创建一个新的提交，抵消指定提交的修改（安全回退，不删除历史）
七、其他常用命令
命令	作用
git stash	将工作区的修改暂存到 “栈” 中（临时保存未提交的修改，用于切换分支）
git stash pop	恢复最近一次 stash 的修改，并删除该 stash 记录
git stash list	查看所有 stash 记录
git rm <文件名>	删除文件并添加到暂存区（如 git rm test.txt）
git mv <旧文件名> <新文件名>	重命名文件并添加到暂存区（如 git mv old.js new.js）
git config --global user.name "你的名字"	配置全局用户名（提交时显示）
git config --global user.email "你的邮箱"	配置全局邮箱（提交时显示）


1. 推荐方案：“合并后删除旧分支 + 新功能建新分支”
具体操作流程
在 main 分支合并 dev1（确保合并成功且代码测试无误）：
bash
# 切换到main分支
git checkout main
# 拉取最新代码（避免冲突）
git pull origin main
# 合并dev1分支
git merge dev1
# 推送合并后的main到远程（若需）
git push origin main

删除本地和远程的 dev1 分支（已完成使命，无保留必要）：
bash
# 删除本地dev1
git branch -d dev1
# 删除远程dev1（若远程也存在该分支）
git push origin --delete dev1

开发新功能时，从最新的 main 分支创建新分支（如 dev2）：
bash
git checkout main
git pull origin main
git checkout -b dev2  # 基于最新main创建新功能分支